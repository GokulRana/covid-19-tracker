{"version":3,"sources":["InfoBox.jsx","util.jsx","Map.jsx","Table.jsx","LineGraph.jsx","App.jsx","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setcountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setmapCenter","mapZoom","setmapZoom","mapCountries","setMapCountries","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c19d4bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      rgb: \"rgb(204, 16, 52)\",\r\n      half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 200,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      rgb: \"rgb(125, 215, 29)\",\r\n      half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 400,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      rgb: \"rgb(251, 68, 67)\",\r\n      half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 800,\r\n    },\r\n  };\r\n\r\nexport const sortData=(data) => {\r\n    const sortedData=[...data];\r\n\r\n    return sortedData.sort((a,b) => (a.cases>b.cases? -1 : 1))\r\n        \r\n    };\r\n\r\n    export const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n    export const showDataOnMap=(data, casesType='cases') =>(\r\n         \r\n        data.map(country => (\r\n            <Circle\r\n            center={[country.countryInfo.lat,country.countryInfo.long]}\r\n            fillOpacity ={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n              }\r\n            >\r\n            \r\n            <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n            </Circle>\r\n\r\n        ))\r\n    );\r\n       \r\n    \r\n\r\n\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util';\r\n\r\nconst Map = ({countries,casesType,center,zoom}) => {\r\n\treturn (\r\n\t\t<div className=\"map\">\r\n\t\t\t<LeafletMap center={center} zoom={zoom}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png \"\r\n\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreet '\r\n\t\t\t\t/>\r\n               \r\n\t\t\t   {showDataOnMap(countries,casesType)}\r\n\t\t\t</LeafletMap>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Map","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React,{useState,useEffect} from 'react';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport {MenuItem,FormControl,Select,Card,CardContent} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport {sortData,prettyPrintStat} from \"./util\"\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\n\n\nconst App = () => {\nconst[countries,setcountries]=useState([]);\nconst[country,setCountry]=useState(\"worldwide\");\nconst[countryInfo,setCountryInfo]=useState({});\nconst[tableData,setTableData]=useState([]);\nconst[casesType,setCasesType]=useState(\"cases\");\nconst[mapCenter,setmapCenter]=useState({lat: 34.80746, lng: -40.4796});\nconst[mapZoom,setmapZoom]=useState(3)\nconst[mapCountries, setMapCountries]=useState([]);\n\nuseEffect(() =>{      /*this useffect is used to show the worldwide cases initially*/\n\tfetch(\"https://corona.lmao.ninja/v3/covid-19/all\")\n\t.then((response) => response.json())\n\t.then((data) =>{\n\t\tsetCountryInfo(data);\n\t});\n}, []);\n\nuseEffect(() =>{\nconst getCountriesData= async () =>{\nawait fetch(\"https://corona.lmao.ninja/v3/covid-19/countries\")\n.then((response) => response.json())\n.then((data) => {\n\nconst countries = data.map((country) => ({\nname: country.country,\nvalue: country.countryInfo.iso2,\n}));\n\nconst sortedData=sortData(data);\nsetTableData(sortedData);\nsetMapCountries(data);\nsetcountries(countries);\n});\n};\n\ngetCountriesData();\n}, []);\nconst onCountryChange = async (event) => {\n const countryCode = event.target.value\n\n\nconst url=\ncountryCode===\"worldwide\"?\"https://corona.lmao.ninja/v3/covid-19/all\"\n:`https://corona.lmao.ninja/v3/covid-19/countries/${countryCode}`;\n\nawait fetch(url)\n.then(response =>response.json())\n.then(data =>{\n\nsetCountry(countryCode);\n\nsetCountryInfo(data);\n\nsetmapCenter([data.countryInfo.lat,data.countryInfo.long]);\nsetmapZoom(4);\n})\n\n\n}\n\nreturn(\n<>\n<div className=\"app\">\n\t<div className=\"app_left\">\n\t\t<div className=\"app_header\">\n\t\t\t<h1>Covid 19 Tracker</h1>\n\t\t\t<FormControl className=\"app_dropdown\">\n\t\t\t\t<Select\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tvalue={country}\n\t\t\t\t\tonChange={onCountryChange} >\n\t\t\t\t\t<MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\t\t\t\t\t{countries.map((country) =>\n\t\t\t\t\t<MenuItem value={country.value} > {country.name} </MenuItem>\t)}\n\t\t\t\t</Select>\n\t\t\t</FormControl>\n\t\t</div>\n\t\t<div className=\"app_stats\">\n\t\t<InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n\t\t<Map casesType={casesType}\n\t\tcountries={mapCountries}\n\t\tcenter={mapCenter}\n\t\tzoom={mapZoom}\n\t\t/>\n\t</div>\n\t<Card className=\"app_right\">\n\t<CardContent>\n     <h2>Live Cases by Country</h2>\n     <Table countries={tableData} />\n      <h3>Worldwide new {casesType}</h3>\n\t <LineGraph casesType={casesType} />\n       \n\t</CardContent>\n\t</Card>\n\n</div>\n\t</>\n\t);\n\t};\n\t\n\texport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App.jsx\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n\t\n\t<BrowserRouter>\n\t<App/>\n\t</BrowserRouter>,\n\t\n\tdocument.getElementById(\"root\"));"],"sourceRoot":""}